#!/bin/bash

# Description:
# -----------
# «git log verbose oneline», provides enhanced control over `git-log` output by
# making it possible to use a shell pipeline to transform the commit format as
# required. This script is meant to be used as a Git alias, e.g.:
# ```
# [alias]
#   logvo = !spub-git-logvo
# ```
#
# Parameters:
# ----------
# $*: Options for `git-log`.
#
# Examples:
# --------
# Get the first 10 commits in the branch `main`.
# ```
# $ spub-git-logvo main -10
# ...
# ```
#
# Or better, the same use case when configured as a Git alias:
# ```
# $ git logvo main -10
# ...
# ```

# `git-log` format sections.
HASH_SECTION="\
~HASH%hHASH~\
~PARENTS%pPARENTS~"
DATE_SECTION="\
~A_DATE_PARTS%adA_DATE_PARTS~"
AUTHOR_SECTION="\
~A_NAME%anA_NAME~\
~C_NAME%cnC_NAME~\
~A_EMAIL%aeA_EMAIL~\
~C_EMAIL%ceC_EMAIL~"
MESSAGE_SECTION='%C(auto)%d %s'

# `git-log` date and log format.
GIT_LOG_DATE_FORMAT="\
~A_DATE_YEAR_4D%YA_DATE_YEAR_4D~\
~A_DATE_MONTH_2D%mA_DATE_MONTH_2D~\
~A_DATE_MONTH_3L%bA_DATE_MONTH_3L~\
~A_DATE_DAY_2D%dA_DATE_DAY_2D~"
GIT_LOG_FORMAT="${HASH_SECTION} ${DATE_SECTION} ${AUTHOR_SECTION} ${MESSAGE_SECTION}"

git log --color=always --date=format:"$GIT_LOG_DATE_FORMAT" --pretty=format:"$GIT_LOG_FORMAT" $* \
  | gawk -f "$SPUB/utils/git-logvo.gawk" \
  | spub-git-delta-navigate

